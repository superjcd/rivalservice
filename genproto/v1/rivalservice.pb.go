// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: rivalservice.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_success Status = 0
	Status_failure Status = 1
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "success",
		1: "failure",
	}
	Status_value = map[string]int32{
		"success": 0,
		"failure": 1,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_rivalservice_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_rivalservice_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{0}
}

type AmzProductInactivateDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asin         string `protobuf:"bytes,1,opt,name=asin,proto3" json:"asin,omitempty"`
	Country      string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	Title        string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	BulletPoints string `protobuf:"bytes,4,opt,name=bullet_points,json=bulletPoints,proto3" json:"bullet_points,omitempty"`
	CreateDate   string `protobuf:"bytes,5,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
}

func (x *AmzProductInactivateDetail) Reset() {
	*x = AmzProductInactivateDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rivalservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmzProductInactivateDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmzProductInactivateDetail) ProtoMessage() {}

func (x *AmzProductInactivateDetail) ProtoReflect() protoreflect.Message {
	mi := &file_rivalservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmzProductInactivateDetail.ProtoReflect.Descriptor instead.
func (*AmzProductInactivateDetail) Descriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{0}
}

func (x *AmzProductInactivateDetail) GetAsin() string {
	if x != nil {
		return x.Asin
	}
	return ""
}

func (x *AmzProductInactivateDetail) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *AmzProductInactivateDetail) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AmzProductInactivateDetail) GetBulletPoints() string {
	if x != nil {
		return x.BulletPoints
	}
	return ""
}

func (x *AmzProductInactivateDetail) GetCreateDate() string {
	if x != nil {
		return x.CreateDate
	}
	return ""
}

type AmzProductActiveDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asin            string `protobuf:"bytes,1,opt,name=asin,proto3" json:"asin,omitempty"`
	Country         string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	Price           string `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	Coupon          string `protobuf:"bytes,4,opt,name=coupon,proto3" json:"coupon,omitempty"`
	Currency        string `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	Star            string `protobuf:"bytes,6,opt,name=star,proto3" json:"star,omitempty"`
	Ratings         uint32 `protobuf:"varint,7,opt,name=ratings,proto3" json:"ratings,omitempty"`
	Image           string `protobuf:"bytes,8,opt,name=image,proto3" json:"image,omitempty"`
	ParentAsin      string `protobuf:"bytes,9,opt,name=parent_asin,json=parentAsin,proto3" json:"parent_asin,omitempty"`
	CategoryInfo    string `protobuf:"bytes,10,opt,name=category_info,json=categoryInfo,proto3" json:"category_info,omitempty"`
	TopCategoryName string `protobuf:"bytes,11,opt,name=top_category_name,json=topCategoryName,proto3" json:"top_category_name,omitempty"`
	TopCategoryRank uint32 `protobuf:"varint,12,opt,name=top_category_rank,json=topCategoryRank,proto3" json:"top_category_rank,omitempty"`
	Color           string `protobuf:"bytes,13,opt,name=color,proto3" json:"color,omitempty"`
	Weight          string `protobuf:"bytes,14,opt,name=weight,proto3" json:"weight,omitempty"`
	WeightUnit      string `protobuf:"bytes,15,opt,name=weight_unit,json=weightUnit,proto3" json:"weight_unit,omitempty"`
	Dimensions      string `protobuf:"bytes,16,opt,name=dimensions,proto3" json:"dimensions,omitempty"`
	DimensionsUnit  string `protobuf:"bytes,17,opt,name=dimensions_unit,json=dimensionsUnit,proto3" json:"dimensions_unit,omitempty"`
	CreateDate      string `protobuf:"bytes,18,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
}

func (x *AmzProductActiveDetail) Reset() {
	*x = AmzProductActiveDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rivalservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmzProductActiveDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmzProductActiveDetail) ProtoMessage() {}

func (x *AmzProductActiveDetail) ProtoReflect() protoreflect.Message {
	mi := &file_rivalservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmzProductActiveDetail.ProtoReflect.Descriptor instead.
func (*AmzProductActiveDetail) Descriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{1}
}

func (x *AmzProductActiveDetail) GetAsin() string {
	if x != nil {
		return x.Asin
	}
	return ""
}

func (x *AmzProductActiveDetail) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *AmzProductActiveDetail) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *AmzProductActiveDetail) GetCoupon() string {
	if x != nil {
		return x.Coupon
	}
	return ""
}

func (x *AmzProductActiveDetail) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *AmzProductActiveDetail) GetStar() string {
	if x != nil {
		return x.Star
	}
	return ""
}

func (x *AmzProductActiveDetail) GetRatings() uint32 {
	if x != nil {
		return x.Ratings
	}
	return 0
}

func (x *AmzProductActiveDetail) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *AmzProductActiveDetail) GetParentAsin() string {
	if x != nil {
		return x.ParentAsin
	}
	return ""
}

func (x *AmzProductActiveDetail) GetCategoryInfo() string {
	if x != nil {
		return x.CategoryInfo
	}
	return ""
}

func (x *AmzProductActiveDetail) GetTopCategoryName() string {
	if x != nil {
		return x.TopCategoryName
	}
	return ""
}

func (x *AmzProductActiveDetail) GetTopCategoryRank() uint32 {
	if x != nil {
		return x.TopCategoryRank
	}
	return 0
}

func (x *AmzProductActiveDetail) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *AmzProductActiveDetail) GetWeight() string {
	if x != nil {
		return x.Weight
	}
	return ""
}

func (x *AmzProductActiveDetail) GetWeightUnit() string {
	if x != nil {
		return x.WeightUnit
	}
	return ""
}

func (x *AmzProductActiveDetail) GetDimensions() string {
	if x != nil {
		return x.Dimensions
	}
	return ""
}

func (x *AmzProductActiveDetail) GetDimensionsUnit() string {
	if x != nil {
		return x.DimensionsUnit
	}
	return ""
}

func (x *AmzProductActiveDetail) GetCreateDate() string {
	if x != nil {
		return x.CreateDate
	}
	return ""
}

// {user: {asin_country: <set>}}
type CreateRivalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User    string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Asin    string   `protobuf:"bytes,2,opt,name=asin,proto3" json:"asin,omitempty"`
	Country string   `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	Rivals  []string `protobuf:"bytes,4,rep,name=rivals,proto3" json:"rivals,omitempty"`
}

func (x *CreateRivalRequest) Reset() {
	*x = CreateRivalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rivalservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRivalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRivalRequest) ProtoMessage() {}

func (x *CreateRivalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rivalservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRivalRequest.ProtoReflect.Descriptor instead.
func (*CreateRivalRequest) Descriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{2}
}

func (x *CreateRivalRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *CreateRivalRequest) GetAsin() string {
	if x != nil {
		return x.Asin
	}
	return ""
}

func (x *CreateRivalRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *CreateRivalRequest) GetRivals() []string {
	if x != nil {
		return x.Rivals
	}
	return nil
}

type CreateRivalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg    string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Status Status `protobuf:"varint,2,opt,name=status,proto3,enum=superjcd.rivalservice.v1.Status" json:"status,omitempty"`
}

func (x *CreateRivalResponse) Reset() {
	*x = CreateRivalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rivalservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRivalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRivalResponse) ProtoMessage() {}

func (x *CreateRivalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rivalservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRivalResponse.ProtoReflect.Descriptor instead.
func (*CreateRivalResponse) Descriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{3}
}

func (x *CreateRivalResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CreateRivalResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_success
}

// 为某个产品获取所有竞品， 没有的话就是某个用户的所有竞品
type ListRivalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User    string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Country string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	Asin    string `protobuf:"bytes,3,opt,name=asin,proto3" json:"asin,omitempty"`
	Offset  int32  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit   int32  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListRivalRequest) Reset() {
	*x = ListRivalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rivalservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRivalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRivalRequest) ProtoMessage() {}

func (x *ListRivalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rivalservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRivalRequest.ProtoReflect.Descriptor instead.
func (*ListRivalRequest) Descriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{4}
}

func (x *ListRivalRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ListRivalRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ListRivalRequest) GetAsin() string {
	if x != nil {
		return x.Asin
	}
	return ""
}

func (x *ListRivalRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListRivalRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type Rival struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User      string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Country   string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	Asin      string `protobuf:"bytes,3,opt,name=asin,proto3" json:"asin,omitempty"`
	RivalAsin string `protobuf:"bytes,4,opt,name=rival_asin,json=rivalAsin,proto3" json:"rival_asin,omitempty"`
}

func (x *Rival) Reset() {
	*x = Rival{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rivalservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rival) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rival) ProtoMessage() {}

func (x *Rival) ProtoReflect() protoreflect.Message {
	mi := &file_rivalservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rival.ProtoReflect.Descriptor instead.
func (*Rival) Descriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{5}
}

func (x *Rival) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Rival) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Rival) GetAsin() string {
	if x != nil {
		return x.Asin
	}
	return ""
}

func (x *Rival) GetRivalAsin() string {
	if x != nil {
		return x.RivalAsin
	}
	return ""
}

type ListRivalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg    string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Status Status   `protobuf:"varint,2,opt,name=status,proto3,enum=superjcd.rivalservice.v1.Status" json:"status,omitempty"`
	Rivals []*Rival `protobuf:"bytes,3,rep,name=rivals,proto3" json:"rivals,omitempty"`
}

func (x *ListRivalResponse) Reset() {
	*x = ListRivalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rivalservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRivalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRivalResponse) ProtoMessage() {}

func (x *ListRivalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rivalservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRivalResponse.ProtoReflect.Descriptor instead.
func (*ListRivalResponse) Descriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{6}
}

func (x *ListRivalResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ListRivalResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_success
}

func (x *ListRivalResponse) GetRivals() []*Rival {
	if x != nil {
		return x.Rivals
	}
	return nil
}

type DeleteRivalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User    string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Asin    string   `protobuf:"bytes,2,opt,name=asin,proto3" json:"asin,omitempty"`
	Country string   `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	Rivals  []string `protobuf:"bytes,4,rep,name=rivals,proto3" json:"rivals,omitempty"`
}

func (x *DeleteRivalRequest) Reset() {
	*x = DeleteRivalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rivalservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRivalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRivalRequest) ProtoMessage() {}

func (x *DeleteRivalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rivalservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRivalRequest.ProtoReflect.Descriptor instead.
func (*DeleteRivalRequest) Descriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteRivalRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *DeleteRivalRequest) GetAsin() string {
	if x != nil {
		return x.Asin
	}
	return ""
}

func (x *DeleteRivalRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *DeleteRivalRequest) GetRivals() []string {
	if x != nil {
		return x.Rivals
	}
	return nil
}

type DeleteRivalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg    string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Status Status `protobuf:"varint,2,opt,name=status,proto3,enum=superjcd.rivalservice.v1.Status" json:"status,omitempty"`
}

func (x *DeleteRivalResponse) Reset() {
	*x = DeleteRivalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rivalservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRivalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRivalResponse) ProtoMessage() {}

func (x *DeleteRivalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rivalservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRivalResponse.ProtoReflect.Descriptor instead.
func (*DeleteRivalResponse) Descriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteRivalResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeleteRivalResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_success
}

type AppendRivalChangesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldDate string `protobuf:"bytes,1,opt,name=old_date,json=oldDate,proto3" json:"old_date,omitempty"`
	NewDate string `protobuf:"bytes,2,opt,name=new_date,json=newDate,proto3" json:"new_date,omitempty"`
	Field   string `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *AppendRivalChangesRequest) Reset() {
	*x = AppendRivalChangesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rivalservice_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendRivalChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendRivalChangesRequest) ProtoMessage() {}

func (x *AppendRivalChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rivalservice_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendRivalChangesRequest.ProtoReflect.Descriptor instead.
func (*AppendRivalChangesRequest) Descriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{9}
}

func (x *AppendRivalChangesRequest) GetOldDate() string {
	if x != nil {
		return x.OldDate
	}
	return ""
}

func (x *AppendRivalChangesRequest) GetNewDate() string {
	if x != nil {
		return x.NewDate
	}
	return ""
}

func (x *AppendRivalChangesRequest) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

type AppendRivalChangesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg    string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Status Status `protobuf:"varint,2,opt,name=status,proto3,enum=superjcd.rivalservice.v1.Status" json:"status,omitempty"`
}

func (x *AppendRivalChangesResponse) Reset() {
	*x = AppendRivalChangesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rivalservice_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendRivalChangesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendRivalChangesResponse) ProtoMessage() {}

func (x *AppendRivalChangesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rivalservice_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendRivalChangesResponse.ProtoReflect.Descriptor instead.
func (*AppendRivalChangesResponse) Descriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{10}
}

func (x *AppendRivalChangesResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AppendRivalChangesResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_success
}

type ListRivalChangesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User       string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Country    string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	CreateDate string `protobuf:"bytes,3,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	Field      string `protobuf:"bytes,4,opt,name=field,proto3" json:"field,omitempty"`
	Offset     int32  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit      int32  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListRivalChangesRequest) Reset() {
	*x = ListRivalChangesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rivalservice_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRivalChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRivalChangesRequest) ProtoMessage() {}

func (x *ListRivalChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rivalservice_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRivalChangesRequest.ProtoReflect.Descriptor instead.
func (*ListRivalChangesRequest) Descriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{11}
}

func (x *ListRivalChangesRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ListRivalChangesRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ListRivalChangesRequest) GetCreateDate() string {
	if x != nil {
		return x.CreateDate
	}
	return ""
}

func (x *ListRivalChangesRequest) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *ListRivalChangesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListRivalChangesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type RivalChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyAsin    string `protobuf:"bytes,1,opt,name=my_asin,json=myAsin,proto3" json:"my_asin,omitempty"`
	RivalAsin string `protobuf:"bytes,2,opt,name=rival_asin,json=rivalAsin,proto3" json:"rival_asin,omitempty"`
	Country   string `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	Field     string `protobuf:"bytes,4,opt,name=field,proto3" json:"field,omitempty"`
	OldValue  string `protobuf:"bytes,5,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	NewValue  string `protobuf:"bytes,6,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
}

func (x *RivalChange) Reset() {
	*x = RivalChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rivalservice_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RivalChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RivalChange) ProtoMessage() {}

func (x *RivalChange) ProtoReflect() protoreflect.Message {
	mi := &file_rivalservice_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RivalChange.ProtoReflect.Descriptor instead.
func (*RivalChange) Descriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{12}
}

func (x *RivalChange) GetMyAsin() string {
	if x != nil {
		return x.MyAsin
	}
	return ""
}

func (x *RivalChange) GetRivalAsin() string {
	if x != nil {
		return x.RivalAsin
	}
	return ""
}

func (x *RivalChange) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *RivalChange) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *RivalChange) GetOldValue() string {
	if x != nil {
		return x.OldValue
	}
	return ""
}

func (x *RivalChange) GetNewValue() string {
	if x != nil {
		return x.NewValue
	}
	return ""
}

type ListRivalChangesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg          string         `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Status       Status         `protobuf:"varint,2,opt,name=status,proto3,enum=superjcd.rivalservice.v1.Status" json:"status,omitempty"`
	RivalChanges []*RivalChange `protobuf:"bytes,3,rep,name=rival_changes,json=rivalChanges,proto3" json:"rival_changes,omitempty"`
}

func (x *ListRivalChangesResponse) Reset() {
	*x = ListRivalChangesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rivalservice_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRivalChangesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRivalChangesResponse) ProtoMessage() {}

func (x *ListRivalChangesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rivalservice_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRivalChangesResponse.ProtoReflect.Descriptor instead.
func (*ListRivalChangesResponse) Descriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{13}
}

func (x *ListRivalChangesResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ListRivalChangesResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_success
}

func (x *ListRivalChangesResponse) GetRivalChanges() []*RivalChange {
	if x != nil {
		return x.RivalChanges
	}
	return nil
}

type AppendRivalProductInactiveDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details []*AmzProductInactivateDetail `protobuf:"bytes,1,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *AppendRivalProductInactiveDetailRequest) Reset() {
	*x = AppendRivalProductInactiveDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rivalservice_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendRivalProductInactiveDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendRivalProductInactiveDetailRequest) ProtoMessage() {}

func (x *AppendRivalProductInactiveDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rivalservice_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendRivalProductInactiveDetailRequest.ProtoReflect.Descriptor instead.
func (*AppendRivalProductInactiveDetailRequest) Descriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{14}
}

func (x *AppendRivalProductInactiveDetailRequest) GetDetails() []*AmzProductInactivateDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

type AppendRivalProductInactiveDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg    string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Status Status `protobuf:"varint,2,opt,name=status,proto3,enum=superjcd.rivalservice.v1.Status" json:"status,omitempty"`
}

func (x *AppendRivalProductInactiveDetailResponse) Reset() {
	*x = AppendRivalProductInactiveDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rivalservice_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendRivalProductInactiveDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendRivalProductInactiveDetailResponse) ProtoMessage() {}

func (x *AppendRivalProductInactiveDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rivalservice_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendRivalProductInactiveDetailResponse.ProtoReflect.Descriptor instead.
func (*AppendRivalProductInactiveDetailResponse) Descriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{15}
}

func (x *AppendRivalProductInactiveDetailResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AppendRivalProductInactiveDetailResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_success
}

type AppendRivalProductActiveDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details []*AmzProductActiveDetail `protobuf:"bytes,1,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *AppendRivalProductActiveDetailRequest) Reset() {
	*x = AppendRivalProductActiveDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rivalservice_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendRivalProductActiveDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendRivalProductActiveDetailRequest) ProtoMessage() {}

func (x *AppendRivalProductActiveDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rivalservice_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendRivalProductActiveDetailRequest.ProtoReflect.Descriptor instead.
func (*AppendRivalProductActiveDetailRequest) Descriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{16}
}

func (x *AppendRivalProductActiveDetailRequest) GetDetails() []*AmzProductActiveDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

type AppendRivalProductActiveDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg    string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Status Status `protobuf:"varint,2,opt,name=status,proto3,enum=superjcd.rivalservice.v1.Status" json:"status,omitempty"`
}

func (x *AppendRivalProductActiveDetailResponse) Reset() {
	*x = AppendRivalProductActiveDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rivalservice_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendRivalProductActiveDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendRivalProductActiveDetailResponse) ProtoMessage() {}

func (x *AppendRivalProductActiveDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rivalservice_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendRivalProductActiveDetailResponse.ProtoReflect.Descriptor instead.
func (*AppendRivalProductActiveDetailResponse) Descriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{17}
}

func (x *AppendRivalProductActiveDetailResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AppendRivalProductActiveDetailResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_success
}

type DeleteRivalChangesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinCreateDate string `protobuf:"bytes,1,opt,name=min_create_date,json=minCreateDate,proto3" json:"min_create_date,omitempty"`
}

func (x *DeleteRivalChangesRequest) Reset() {
	*x = DeleteRivalChangesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rivalservice_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRivalChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRivalChangesRequest) ProtoMessage() {}

func (x *DeleteRivalChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rivalservice_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRivalChangesRequest.ProtoReflect.Descriptor instead.
func (*DeleteRivalChangesRequest) Descriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteRivalChangesRequest) GetMinCreateDate() string {
	if x != nil {
		return x.MinCreateDate
	}
	return ""
}

type DeleteRivalChangesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg    string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Status Status `protobuf:"varint,2,opt,name=status,proto3,enum=superjcd.rivalservice.v1.Status" json:"status,omitempty"`
}

func (x *DeleteRivalChangesResponse) Reset() {
	*x = DeleteRivalChangesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rivalservice_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRivalChangesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRivalChangesResponse) ProtoMessage() {}

func (x *DeleteRivalChangesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rivalservice_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRivalChangesResponse.ProtoReflect.Descriptor instead.
func (*DeleteRivalChangesResponse) Descriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteRivalChangesResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeleteRivalChangesResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_success
}

type DeleteRivalInactiveDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinCreateDate string `protobuf:"bytes,1,opt,name=min_create_date,json=minCreateDate,proto3" json:"min_create_date,omitempty"`
}

func (x *DeleteRivalInactiveDetailRequest) Reset() {
	*x = DeleteRivalInactiveDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rivalservice_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRivalInactiveDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRivalInactiveDetailRequest) ProtoMessage() {}

func (x *DeleteRivalInactiveDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rivalservice_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRivalInactiveDetailRequest.ProtoReflect.Descriptor instead.
func (*DeleteRivalInactiveDetailRequest) Descriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteRivalInactiveDetailRequest) GetMinCreateDate() string {
	if x != nil {
		return x.MinCreateDate
	}
	return ""
}

type DeleteRivalInactiveDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg    string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Status Status `protobuf:"varint,2,opt,name=status,proto3,enum=superjcd.rivalservice.v1.Status" json:"status,omitempty"`
}

func (x *DeleteRivalInactiveDetailResponse) Reset() {
	*x = DeleteRivalInactiveDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rivalservice_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRivalInactiveDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRivalInactiveDetailResponse) ProtoMessage() {}

func (x *DeleteRivalInactiveDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rivalservice_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRivalInactiveDetailResponse.ProtoReflect.Descriptor instead.
func (*DeleteRivalInactiveDetailResponse) Descriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteRivalInactiveDetailResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeleteRivalInactiveDetailResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_success
}

type DeleteRivalActiveDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinCreateDate string `protobuf:"bytes,1,opt,name=min_create_date,json=minCreateDate,proto3" json:"min_create_date,omitempty"`
}

func (x *DeleteRivalActiveDetailRequest) Reset() {
	*x = DeleteRivalActiveDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rivalservice_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRivalActiveDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRivalActiveDetailRequest) ProtoMessage() {}

func (x *DeleteRivalActiveDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rivalservice_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRivalActiveDetailRequest.ProtoReflect.Descriptor instead.
func (*DeleteRivalActiveDetailRequest) Descriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteRivalActiveDetailRequest) GetMinCreateDate() string {
	if x != nil {
		return x.MinCreateDate
	}
	return ""
}

type DeleteRivalActiveDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg    string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Status Status `protobuf:"varint,2,opt,name=status,proto3,enum=superjcd.rivalservice.v1.Status" json:"status,omitempty"`
}

func (x *DeleteRivalActiveDetailResponse) Reset() {
	*x = DeleteRivalActiveDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rivalservice_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRivalActiveDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRivalActiveDetailResponse) ProtoMessage() {}

func (x *DeleteRivalActiveDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rivalservice_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRivalActiveDetailResponse.ProtoReflect.Descriptor instead.
func (*DeleteRivalActiveDetailResponse) Descriptor() ([]byte, []int) {
	return file_rivalservice_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteRivalActiveDetailResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeleteRivalActiveDetailResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_success
}

var File_rivalservice_proto protoreflect.FileDescriptor

var file_rivalservice_proto_rawDesc = []byte{
	0x0a, 0x12, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x22, 0xa6,
	0x01, 0x0a, 0x1a, 0x41, 0x6d, 0x7a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x73, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x73, 0x69,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0xab, 0x04, 0x0a, 0x16, 0x41, 0x6d, 0x7a, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x73, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x73, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74,
	0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x73, 0x69, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x69, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x70,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x6e, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x69, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x73, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x73, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x73, 0x22, 0x61, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x69, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x38,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x73, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x73, 0x69, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x68, 0x0a,
	0x05, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x73, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x73, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x5f, 0x61, 0x73, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x41, 0x73, 0x69, 0x6e, 0x22, 0x98, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x69, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x52, 0x06, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x73, 0x22, 0x6e, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x73, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x73, 0x69, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x73, 0x22, 0x61, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x67, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52,
	0x69, 0x76, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6e, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x68,
	0x0a, 0x1a, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x38,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x0b, 0x52, 0x69, 0x76, 0x61,
	0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x79, 0x5f, 0x61, 0x73,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x79, 0x41, 0x73, 0x69, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x73, 0x69, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x0c, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x79,
	0x0a, 0x27, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x7a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x76, 0x0a, 0x28, 0x41, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6a,
	0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x73, 0x0a, 0x25, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x69, 0x76, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x7a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x74, 0x0a, 0x26, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x52, 0x69, 0x76, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x43, 0x0a, 0x19,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x22, 0x68, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x76, 0x61, 0x6c,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4a, 0x0a, 0x20, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x6f, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x38,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x48, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69,
	0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x22, 0x6d, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x76, 0x61,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6a,
	0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2a, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x10, 0x01, 0x32, 0xd0, 0x0a, 0x0a, 0x0c, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x69, 0x76, 0x61, 0x6c, 0x12, 0x2c, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x63, 0x64,
	0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x64, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x12,
	0x2a, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x69, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x76, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x12, 0x2c, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6a,
	0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x63, 0x64,
	0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x69,
	0x76, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x33, 0x2e, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x69, 0x76, 0x61,
	0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x76,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x69, 0x76, 0x61,
	0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x76,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x33, 0x2e, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x76, 0x61, 0x6c,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x69, 0x76, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xab, 0x01, 0x0a, 0x20, 0x41, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x41, 0x2e, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x69, 0x76,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42,
	0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x52, 0x69, 0x76, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x69, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x3a, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b,
	0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x69, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa5, 0x01,
	0x0a, 0x1e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x3f, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x40, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x38, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x6a, 0x63, 0x64, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x69, 0x76,
	0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6a, 0x63, 0x64, 0x2f,
	0x72, 0x69, 0x76, 0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rivalservice_proto_rawDescOnce sync.Once
	file_rivalservice_proto_rawDescData = file_rivalservice_proto_rawDesc
)

func file_rivalservice_proto_rawDescGZIP() []byte {
	file_rivalservice_proto_rawDescOnce.Do(func() {
		file_rivalservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_rivalservice_proto_rawDescData)
	})
	return file_rivalservice_proto_rawDescData
}

var file_rivalservice_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_rivalservice_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_rivalservice_proto_goTypes = []interface{}{
	(Status)(0),                                      // 0: superjcd.rivalservice.v1.Status
	(*AmzProductInactivateDetail)(nil),               // 1: superjcd.rivalservice.v1.AmzProductInactivateDetail
	(*AmzProductActiveDetail)(nil),                   // 2: superjcd.rivalservice.v1.AmzProductActiveDetail
	(*CreateRivalRequest)(nil),                       // 3: superjcd.rivalservice.v1.CreateRivalRequest
	(*CreateRivalResponse)(nil),                      // 4: superjcd.rivalservice.v1.CreateRivalResponse
	(*ListRivalRequest)(nil),                         // 5: superjcd.rivalservice.v1.ListRivalRequest
	(*Rival)(nil),                                    // 6: superjcd.rivalservice.v1.Rival
	(*ListRivalResponse)(nil),                        // 7: superjcd.rivalservice.v1.ListRivalResponse
	(*DeleteRivalRequest)(nil),                       // 8: superjcd.rivalservice.v1.DeleteRivalRequest
	(*DeleteRivalResponse)(nil),                      // 9: superjcd.rivalservice.v1.DeleteRivalResponse
	(*AppendRivalChangesRequest)(nil),                // 10: superjcd.rivalservice.v1.AppendRivalChangesRequest
	(*AppendRivalChangesResponse)(nil),               // 11: superjcd.rivalservice.v1.AppendRivalChangesResponse
	(*ListRivalChangesRequest)(nil),                  // 12: superjcd.rivalservice.v1.ListRivalChangesRequest
	(*RivalChange)(nil),                              // 13: superjcd.rivalservice.v1.RivalChange
	(*ListRivalChangesResponse)(nil),                 // 14: superjcd.rivalservice.v1.ListRivalChangesResponse
	(*AppendRivalProductInactiveDetailRequest)(nil),  // 15: superjcd.rivalservice.v1.AppendRivalProductInactiveDetailRequest
	(*AppendRivalProductInactiveDetailResponse)(nil), // 16: superjcd.rivalservice.v1.AppendRivalProductInactiveDetailResponse
	(*AppendRivalProductActiveDetailRequest)(nil),    // 17: superjcd.rivalservice.v1.AppendRivalProductActiveDetailRequest
	(*AppendRivalProductActiveDetailResponse)(nil),   // 18: superjcd.rivalservice.v1.AppendRivalProductActiveDetailResponse
	(*DeleteRivalChangesRequest)(nil),                // 19: superjcd.rivalservice.v1.DeleteRivalChangesRequest
	(*DeleteRivalChangesResponse)(nil),               // 20: superjcd.rivalservice.v1.DeleteRivalChangesResponse
	(*DeleteRivalInactiveDetailRequest)(nil),         // 21: superjcd.rivalservice.v1.DeleteRivalInactiveDetailRequest
	(*DeleteRivalInactiveDetailResponse)(nil),        // 22: superjcd.rivalservice.v1.DeleteRivalInactiveDetailResponse
	(*DeleteRivalActiveDetailRequest)(nil),           // 23: superjcd.rivalservice.v1.DeleteRivalActiveDetailRequest
	(*DeleteRivalActiveDetailResponse)(nil),          // 24: superjcd.rivalservice.v1.DeleteRivalActiveDetailResponse
}
var file_rivalservice_proto_depIdxs = []int32{
	0,  // 0: superjcd.rivalservice.v1.CreateRivalResponse.status:type_name -> superjcd.rivalservice.v1.Status
	0,  // 1: superjcd.rivalservice.v1.ListRivalResponse.status:type_name -> superjcd.rivalservice.v1.Status
	6,  // 2: superjcd.rivalservice.v1.ListRivalResponse.rivals:type_name -> superjcd.rivalservice.v1.Rival
	0,  // 3: superjcd.rivalservice.v1.DeleteRivalResponse.status:type_name -> superjcd.rivalservice.v1.Status
	0,  // 4: superjcd.rivalservice.v1.AppendRivalChangesResponse.status:type_name -> superjcd.rivalservice.v1.Status
	0,  // 5: superjcd.rivalservice.v1.ListRivalChangesResponse.status:type_name -> superjcd.rivalservice.v1.Status
	13, // 6: superjcd.rivalservice.v1.ListRivalChangesResponse.rival_changes:type_name -> superjcd.rivalservice.v1.RivalChange
	1,  // 7: superjcd.rivalservice.v1.AppendRivalProductInactiveDetailRequest.details:type_name -> superjcd.rivalservice.v1.AmzProductInactivateDetail
	0,  // 8: superjcd.rivalservice.v1.AppendRivalProductInactiveDetailResponse.status:type_name -> superjcd.rivalservice.v1.Status
	2,  // 9: superjcd.rivalservice.v1.AppendRivalProductActiveDetailRequest.details:type_name -> superjcd.rivalservice.v1.AmzProductActiveDetail
	0,  // 10: superjcd.rivalservice.v1.AppendRivalProductActiveDetailResponse.status:type_name -> superjcd.rivalservice.v1.Status
	0,  // 11: superjcd.rivalservice.v1.DeleteRivalChangesResponse.status:type_name -> superjcd.rivalservice.v1.Status
	0,  // 12: superjcd.rivalservice.v1.DeleteRivalInactiveDetailResponse.status:type_name -> superjcd.rivalservice.v1.Status
	0,  // 13: superjcd.rivalservice.v1.DeleteRivalActiveDetailResponse.status:type_name -> superjcd.rivalservice.v1.Status
	3,  // 14: superjcd.rivalservice.v1.RivalService.CreateRival:input_type -> superjcd.rivalservice.v1.CreateRivalRequest
	5,  // 15: superjcd.rivalservice.v1.RivalService.ListRival:input_type -> superjcd.rivalservice.v1.ListRivalRequest
	8,  // 16: superjcd.rivalservice.v1.RivalService.DeleteRival:input_type -> superjcd.rivalservice.v1.DeleteRivalRequest
	10, // 17: superjcd.rivalservice.v1.RivalService.AppendRivalChanges:input_type -> superjcd.rivalservice.v1.AppendRivalChangesRequest
	12, // 18: superjcd.rivalservice.v1.RivalService.ListRivalChanges:input_type -> superjcd.rivalservice.v1.ListRivalChangesRequest
	19, // 19: superjcd.rivalservice.v1.RivalService.DeleteRivalChanges:input_type -> superjcd.rivalservice.v1.DeleteRivalChangesRequest
	15, // 20: superjcd.rivalservice.v1.RivalService.AppendRivalProductInactiveDetail:input_type -> superjcd.rivalservice.v1.AppendRivalProductInactiveDetailRequest
	21, // 21: superjcd.rivalservice.v1.RivalService.DeleteRivalInactiveDetail:input_type -> superjcd.rivalservice.v1.DeleteRivalInactiveDetailRequest
	17, // 22: superjcd.rivalservice.v1.RivalService.AppendRivalProductActiveDetail:input_type -> superjcd.rivalservice.v1.AppendRivalProductActiveDetailRequest
	23, // 23: superjcd.rivalservice.v1.RivalService.DeleteRivalActiveDetail:input_type -> superjcd.rivalservice.v1.DeleteRivalActiveDetailRequest
	4,  // 24: superjcd.rivalservice.v1.RivalService.CreateRival:output_type -> superjcd.rivalservice.v1.CreateRivalResponse
	7,  // 25: superjcd.rivalservice.v1.RivalService.ListRival:output_type -> superjcd.rivalservice.v1.ListRivalResponse
	9,  // 26: superjcd.rivalservice.v1.RivalService.DeleteRival:output_type -> superjcd.rivalservice.v1.DeleteRivalResponse
	11, // 27: superjcd.rivalservice.v1.RivalService.AppendRivalChanges:output_type -> superjcd.rivalservice.v1.AppendRivalChangesResponse
	14, // 28: superjcd.rivalservice.v1.RivalService.ListRivalChanges:output_type -> superjcd.rivalservice.v1.ListRivalChangesResponse
	20, // 29: superjcd.rivalservice.v1.RivalService.DeleteRivalChanges:output_type -> superjcd.rivalservice.v1.DeleteRivalChangesResponse
	16, // 30: superjcd.rivalservice.v1.RivalService.AppendRivalProductInactiveDetail:output_type -> superjcd.rivalservice.v1.AppendRivalProductInactiveDetailResponse
	22, // 31: superjcd.rivalservice.v1.RivalService.DeleteRivalInactiveDetail:output_type -> superjcd.rivalservice.v1.DeleteRivalInactiveDetailResponse
	18, // 32: superjcd.rivalservice.v1.RivalService.AppendRivalProductActiveDetail:output_type -> superjcd.rivalservice.v1.AppendRivalProductActiveDetailResponse
	24, // 33: superjcd.rivalservice.v1.RivalService.DeleteRivalActiveDetail:output_type -> superjcd.rivalservice.v1.DeleteRivalActiveDetailResponse
	24, // [24:34] is the sub-list for method output_type
	14, // [14:24] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_rivalservice_proto_init() }
func file_rivalservice_proto_init() {
	if File_rivalservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rivalservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmzProductInactivateDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rivalservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmzProductActiveDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rivalservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRivalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rivalservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRivalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rivalservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRivalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rivalservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rival); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rivalservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRivalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rivalservice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRivalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rivalservice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRivalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rivalservice_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendRivalChangesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rivalservice_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendRivalChangesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rivalservice_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRivalChangesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rivalservice_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RivalChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rivalservice_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRivalChangesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rivalservice_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendRivalProductInactiveDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rivalservice_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendRivalProductInactiveDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rivalservice_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendRivalProductActiveDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rivalservice_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendRivalProductActiveDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rivalservice_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRivalChangesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rivalservice_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRivalChangesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rivalservice_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRivalInactiveDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rivalservice_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRivalInactiveDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rivalservice_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRivalActiveDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rivalservice_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRivalActiveDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rivalservice_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rivalservice_proto_goTypes,
		DependencyIndexes: file_rivalservice_proto_depIdxs,
		EnumInfos:         file_rivalservice_proto_enumTypes,
		MessageInfos:      file_rivalservice_proto_msgTypes,
	}.Build()
	File_rivalservice_proto = out.File
	file_rivalservice_proto_rawDesc = nil
	file_rivalservice_proto_goTypes = nil
	file_rivalservice_proto_depIdxs = nil
}
