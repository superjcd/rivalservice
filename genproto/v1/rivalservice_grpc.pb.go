// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: rivalservice.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RivalService_CreateRival_FullMethodName                      = "/superjcd.rivalservice.v1.RivalService/CreateRival"
	RivalService_ListRival_FullMethodName                        = "/superjcd.rivalservice.v1.RivalService/ListRival"
	RivalService_DeleteRival_FullMethodName                      = "/superjcd.rivalservice.v1.RivalService/DeleteRival"
	RivalService_AppendRivalChanges_FullMethodName               = "/superjcd.rivalservice.v1.RivalService/AppendRivalChanges"
	RivalService_ListRivalChanges_FullMethodName                 = "/superjcd.rivalservice.v1.RivalService/ListRivalChanges"
	RivalService_DeleteRivalChanges_FullMethodName               = "/superjcd.rivalservice.v1.RivalService/DeleteRivalChanges"
	RivalService_AppendRivalProductInactiveDetail_FullMethodName = "/superjcd.rivalservice.v1.RivalService/AppendRivalProductInactiveDetail"
	RivalService_DeleteRivalInactiveDetail_FullMethodName        = "/superjcd.rivalservice.v1.RivalService/DeleteRivalInactiveDetail"
	RivalService_AppendRivalProductActiveDetail_FullMethodName   = "/superjcd.rivalservice.v1.RivalService/AppendRivalProductActiveDetail"
	RivalService_DeleteRivalActiveDetail_FullMethodName          = "/superjcd.rivalservice.v1.RivalService/DeleteRivalActiveDetail"
)

// RivalServiceClient is the client API for RivalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RivalServiceClient interface {
	CreateRival(ctx context.Context, in *CreateRivalRequest, opts ...grpc.CallOption) (*CreateRivalResponse, error)
	ListRival(ctx context.Context, in *ListRivalRequest, opts ...grpc.CallOption) (*ListRivalResponse, error)
	DeleteRival(ctx context.Context, in *DeleteRivalRequest, opts ...grpc.CallOption) (*DeleteRivalResponse, error)
	AppendRivalChanges(ctx context.Context, in *AppendRivalChangesRequest, opts ...grpc.CallOption) (*AppendRivalChangesResponse, error)
	ListRivalChanges(ctx context.Context, in *ListRivalChangesRequest, opts ...grpc.CallOption) (*ListRivalChangesResponse, error)
	DeleteRivalChanges(ctx context.Context, in *DeleteRivalChangesRequest, opts ...grpc.CallOption) (*DeleteRivalChangesResponse, error)
	AppendRivalProductInactiveDetail(ctx context.Context, in *AppendRivalProductInactiveDetailRequest, opts ...grpc.CallOption) (*AppendRivalProductInactiveDetailResponse, error)
	DeleteRivalInactiveDetail(ctx context.Context, in *DeleteRivalInactiveDetailRequest, opts ...grpc.CallOption) (*DeleteRivalInactiveDetailResponse, error)
	AppendRivalProductActiveDetail(ctx context.Context, in *AppendRivalProductActiveDetailRequest, opts ...grpc.CallOption) (*AppendRivalProductActiveDetailResponse, error)
	DeleteRivalActiveDetail(ctx context.Context, in *DeleteRivalActiveDetailRequest, opts ...grpc.CallOption) (*DeleteRivalActiveDetailResponse, error)
}

type rivalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRivalServiceClient(cc grpc.ClientConnInterface) RivalServiceClient {
	return &rivalServiceClient{cc}
}

func (c *rivalServiceClient) CreateRival(ctx context.Context, in *CreateRivalRequest, opts ...grpc.CallOption) (*CreateRivalResponse, error) {
	out := new(CreateRivalResponse)
	err := c.cc.Invoke(ctx, RivalService_CreateRival_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rivalServiceClient) ListRival(ctx context.Context, in *ListRivalRequest, opts ...grpc.CallOption) (*ListRivalResponse, error) {
	out := new(ListRivalResponse)
	err := c.cc.Invoke(ctx, RivalService_ListRival_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rivalServiceClient) DeleteRival(ctx context.Context, in *DeleteRivalRequest, opts ...grpc.CallOption) (*DeleteRivalResponse, error) {
	out := new(DeleteRivalResponse)
	err := c.cc.Invoke(ctx, RivalService_DeleteRival_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rivalServiceClient) AppendRivalChanges(ctx context.Context, in *AppendRivalChangesRequest, opts ...grpc.CallOption) (*AppendRivalChangesResponse, error) {
	out := new(AppendRivalChangesResponse)
	err := c.cc.Invoke(ctx, RivalService_AppendRivalChanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rivalServiceClient) ListRivalChanges(ctx context.Context, in *ListRivalChangesRequest, opts ...grpc.CallOption) (*ListRivalChangesResponse, error) {
	out := new(ListRivalChangesResponse)
	err := c.cc.Invoke(ctx, RivalService_ListRivalChanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rivalServiceClient) DeleteRivalChanges(ctx context.Context, in *DeleteRivalChangesRequest, opts ...grpc.CallOption) (*DeleteRivalChangesResponse, error) {
	out := new(DeleteRivalChangesResponse)
	err := c.cc.Invoke(ctx, RivalService_DeleteRivalChanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rivalServiceClient) AppendRivalProductInactiveDetail(ctx context.Context, in *AppendRivalProductInactiveDetailRequest, opts ...grpc.CallOption) (*AppendRivalProductInactiveDetailResponse, error) {
	out := new(AppendRivalProductInactiveDetailResponse)
	err := c.cc.Invoke(ctx, RivalService_AppendRivalProductInactiveDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rivalServiceClient) DeleteRivalInactiveDetail(ctx context.Context, in *DeleteRivalInactiveDetailRequest, opts ...grpc.CallOption) (*DeleteRivalInactiveDetailResponse, error) {
	out := new(DeleteRivalInactiveDetailResponse)
	err := c.cc.Invoke(ctx, RivalService_DeleteRivalInactiveDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rivalServiceClient) AppendRivalProductActiveDetail(ctx context.Context, in *AppendRivalProductActiveDetailRequest, opts ...grpc.CallOption) (*AppendRivalProductActiveDetailResponse, error) {
	out := new(AppendRivalProductActiveDetailResponse)
	err := c.cc.Invoke(ctx, RivalService_AppendRivalProductActiveDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rivalServiceClient) DeleteRivalActiveDetail(ctx context.Context, in *DeleteRivalActiveDetailRequest, opts ...grpc.CallOption) (*DeleteRivalActiveDetailResponse, error) {
	out := new(DeleteRivalActiveDetailResponse)
	err := c.cc.Invoke(ctx, RivalService_DeleteRivalActiveDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RivalServiceServer is the server API for RivalService service.
// All implementations must embed UnimplementedRivalServiceServer
// for forward compatibility
type RivalServiceServer interface {
	CreateRival(context.Context, *CreateRivalRequest) (*CreateRivalResponse, error)
	ListRival(context.Context, *ListRivalRequest) (*ListRivalResponse, error)
	DeleteRival(context.Context, *DeleteRivalRequest) (*DeleteRivalResponse, error)
	AppendRivalChanges(context.Context, *AppendRivalChangesRequest) (*AppendRivalChangesResponse, error)
	ListRivalChanges(context.Context, *ListRivalChangesRequest) (*ListRivalChangesResponse, error)
	DeleteRivalChanges(context.Context, *DeleteRivalChangesRequest) (*DeleteRivalChangesResponse, error)
	AppendRivalProductInactiveDetail(context.Context, *AppendRivalProductInactiveDetailRequest) (*AppendRivalProductInactiveDetailResponse, error)
	DeleteRivalInactiveDetail(context.Context, *DeleteRivalInactiveDetailRequest) (*DeleteRivalInactiveDetailResponse, error)
	AppendRivalProductActiveDetail(context.Context, *AppendRivalProductActiveDetailRequest) (*AppendRivalProductActiveDetailResponse, error)
	DeleteRivalActiveDetail(context.Context, *DeleteRivalActiveDetailRequest) (*DeleteRivalActiveDetailResponse, error)
	mustEmbedUnimplementedRivalServiceServer()
}

// UnimplementedRivalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRivalServiceServer struct {
}

func (UnimplementedRivalServiceServer) CreateRival(context.Context, *CreateRivalRequest) (*CreateRivalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRival not implemented")
}
func (UnimplementedRivalServiceServer) ListRival(context.Context, *ListRivalRequest) (*ListRivalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRival not implemented")
}
func (UnimplementedRivalServiceServer) DeleteRival(context.Context, *DeleteRivalRequest) (*DeleteRivalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRival not implemented")
}
func (UnimplementedRivalServiceServer) AppendRivalChanges(context.Context, *AppendRivalChangesRequest) (*AppendRivalChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendRivalChanges not implemented")
}
func (UnimplementedRivalServiceServer) ListRivalChanges(context.Context, *ListRivalChangesRequest) (*ListRivalChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRivalChanges not implemented")
}
func (UnimplementedRivalServiceServer) DeleteRivalChanges(context.Context, *DeleteRivalChangesRequest) (*DeleteRivalChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRivalChanges not implemented")
}
func (UnimplementedRivalServiceServer) AppendRivalProductInactiveDetail(context.Context, *AppendRivalProductInactiveDetailRequest) (*AppendRivalProductInactiveDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendRivalProductInactiveDetail not implemented")
}
func (UnimplementedRivalServiceServer) DeleteRivalInactiveDetail(context.Context, *DeleteRivalInactiveDetailRequest) (*DeleteRivalInactiveDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRivalInactiveDetail not implemented")
}
func (UnimplementedRivalServiceServer) AppendRivalProductActiveDetail(context.Context, *AppendRivalProductActiveDetailRequest) (*AppendRivalProductActiveDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendRivalProductActiveDetail not implemented")
}
func (UnimplementedRivalServiceServer) DeleteRivalActiveDetail(context.Context, *DeleteRivalActiveDetailRequest) (*DeleteRivalActiveDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRivalActiveDetail not implemented")
}
func (UnimplementedRivalServiceServer) mustEmbedUnimplementedRivalServiceServer() {}

// UnsafeRivalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RivalServiceServer will
// result in compilation errors.
type UnsafeRivalServiceServer interface {
	mustEmbedUnimplementedRivalServiceServer()
}

func RegisterRivalServiceServer(s grpc.ServiceRegistrar, srv RivalServiceServer) {
	s.RegisterService(&RivalService_ServiceDesc, srv)
}

func _RivalService_CreateRival_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRivalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivalServiceServer).CreateRival(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivalService_CreateRival_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivalServiceServer).CreateRival(ctx, req.(*CreateRivalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RivalService_ListRival_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRivalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivalServiceServer).ListRival(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivalService_ListRival_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivalServiceServer).ListRival(ctx, req.(*ListRivalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RivalService_DeleteRival_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRivalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivalServiceServer).DeleteRival(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivalService_DeleteRival_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivalServiceServer).DeleteRival(ctx, req.(*DeleteRivalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RivalService_AppendRivalChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRivalChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivalServiceServer).AppendRivalChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivalService_AppendRivalChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivalServiceServer).AppendRivalChanges(ctx, req.(*AppendRivalChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RivalService_ListRivalChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRivalChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivalServiceServer).ListRivalChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivalService_ListRivalChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivalServiceServer).ListRivalChanges(ctx, req.(*ListRivalChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RivalService_DeleteRivalChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRivalChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivalServiceServer).DeleteRivalChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivalService_DeleteRivalChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivalServiceServer).DeleteRivalChanges(ctx, req.(*DeleteRivalChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RivalService_AppendRivalProductInactiveDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRivalProductInactiveDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivalServiceServer).AppendRivalProductInactiveDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivalService_AppendRivalProductInactiveDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivalServiceServer).AppendRivalProductInactiveDetail(ctx, req.(*AppendRivalProductInactiveDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RivalService_DeleteRivalInactiveDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRivalInactiveDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivalServiceServer).DeleteRivalInactiveDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivalService_DeleteRivalInactiveDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivalServiceServer).DeleteRivalInactiveDetail(ctx, req.(*DeleteRivalInactiveDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RivalService_AppendRivalProductActiveDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRivalProductActiveDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivalServiceServer).AppendRivalProductActiveDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivalService_AppendRivalProductActiveDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivalServiceServer).AppendRivalProductActiveDetail(ctx, req.(*AppendRivalProductActiveDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RivalService_DeleteRivalActiveDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRivalActiveDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivalServiceServer).DeleteRivalActiveDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivalService_DeleteRivalActiveDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivalServiceServer).DeleteRivalActiveDetail(ctx, req.(*DeleteRivalActiveDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RivalService_ServiceDesc is the grpc.ServiceDesc for RivalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RivalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "superjcd.rivalservice.v1.RivalService",
	HandlerType: (*RivalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRival",
			Handler:    _RivalService_CreateRival_Handler,
		},
		{
			MethodName: "ListRival",
			Handler:    _RivalService_ListRival_Handler,
		},
		{
			MethodName: "DeleteRival",
			Handler:    _RivalService_DeleteRival_Handler,
		},
		{
			MethodName: "AppendRivalChanges",
			Handler:    _RivalService_AppendRivalChanges_Handler,
		},
		{
			MethodName: "ListRivalChanges",
			Handler:    _RivalService_ListRivalChanges_Handler,
		},
		{
			MethodName: "DeleteRivalChanges",
			Handler:    _RivalService_DeleteRivalChanges_Handler,
		},
		{
			MethodName: "AppendRivalProductInactiveDetail",
			Handler:    _RivalService_AppendRivalProductInactiveDetail_Handler,
		},
		{
			MethodName: "DeleteRivalInactiveDetail",
			Handler:    _RivalService_DeleteRivalInactiveDetail_Handler,
		},
		{
			MethodName: "AppendRivalProductActiveDetail",
			Handler:    _RivalService_AppendRivalProductActiveDetail_Handler,
		},
		{
			MethodName: "DeleteRivalActiveDetail",
			Handler:    _RivalService_DeleteRivalActiveDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rivalservice.proto",
}
